package com.client;

import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream.GetField;
import java.io.ObjectOutput;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import com.bean.PFAccount;

public class Client {
	public static void main(String[] args) {
		/* write your code here */
		try {
			List<PFAccount> pfac = readProvidentFundRecords(new File("pf-records.db"));
			System.out.println(pfac);
			
			
			calculateMaturityAmount(pfac.get(2));;
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
		
	public static List<PFAccount> readProvidentFundRecords(File file) throws FileNotFoundException, IOException, ClassNotFoundException {
		
			List<PFAccount> records = new ArrayList<PFAccount>();
		FileInputStream fs = new FileInputStream(file);
		ObjectInputStream oos = new ObjectInputStream(fs);
		PFAccount pa;
		try{
			while((pa = (PFAccount) oos.readObject())!=null)
				records.add(pa);
		
		}catch(EOFException e){
		}
		return records;
	}
	
	public static void calculateMaturityAmount(PFAccount account) {
		/* write your code here */
		
		//PFAccount pf = new PFAccount();
		Calendar present = Calendar.getInstance();
		Calendar past = Calendar.getInstance();
		try {
			past.setTime(new SimpleDateFormat("yyyy-M-dd").parse(account.getDateOfOpening().toString()));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		int R = 9;
		int t = present.get(Calendar.YEAR)-past.get(Calendar.YEAR);
		System.out.println(t);
		double d = account.getBalance()*Math.pow(1+R/100, t);
		System.out.println(d);
	}
	
	public static void closeAccount(PFAccount account) {
		/* write your code here */
		boolean result = account.isActive();
		result= false;
	}
	
	public static void writeProvidentFundRecords(List<PFAccount> records,  File file) throws FileNotFoundException, IOException {
		/* write your code here */
		FileOutputStream fo = new FileOutputStream(file);
		ObjectOutputStream os = new ObjectOutputStream(fo);
		for(PFAccount pf:records){
			System.out.println(pf);
		}
		
	}
	
}
